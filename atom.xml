<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WangFD的博客</title>
  
  <subtitle>Life is short, I use Python!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://didid.top/blog/"/>
  <updated>2020-01-14T12:28:29.861Z</updated>
  <id>http://didid.top/blog/</id>
  
  <author>
    <name>FanDong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux中node的安装</title>
    <link href="http://didid.top/blog/2020/01/14/linux%E4%B8%ADnode%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://didid.top/blog/2020/01/14/linux中node的安装/</id>
    <published>2020-01-14T12:21:39.000Z</published>
    <updated>2020-01-14T12:28:29.861Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-打开node官网下载对应版本的文件"><a href="#1-打开node官网下载对应版本的文件" class="headerlink" title="1.打开node官网下载对应版本的文件"></a>1.打开node官网下载对应版本的文件</h3><p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node下载地址</a></p><h4 id="解压命令：tar-xvJf-tar-xz"><a href="#解压命令：tar-xvJf-tar-xz" class="headerlink" title="解压命令：tar xvJf ***.tar.xz"></a>解压命令：tar xvJf ***.tar.xz</h4><a id="more"></a><h3 id="2-解压文件到本地"><a href="#2-解压文件到本地" class="headerlink" title="2.解压文件到本地"></a>2.解压文件到本地</h3><h4 id="注意-将文件复制到linux的opt目录下-不然可能创建软连接后无法执行"><a href="#注意-将文件复制到linux的opt目录下-不然可能创建软连接后无法执行" class="headerlink" title="注意:将文件复制到linux的opt目录下,不然可能创建软连接后无法执行"></a>注意:将文件复制到linux的opt目录下,不然可能创建软连接后无法执行</h4><h3 id="3-创建对应的软连接"><a href="#3-创建对应的软连接" class="headerlink" title="3.创建对应的软连接"></a>3.创建对应的软连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /opt/node-xx/npm /usr/bin/npm</span><br><span class="line">sudo ln -s /opt/node-xx/node /usr/bin/node</span><br></pre></td></tr></table></figure><h3 id="4-测试是否安装成功"><a href="#4-测试是否安装成功" class="headerlink" title="4.测试是否安装成功"></a>4.测试是否安装成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-打开node官网下载对应版本的文件&quot;&gt;&lt;a href=&quot;#1-打开node官网下载对应版本的文件&quot; class=&quot;headerlink&quot; title=&quot;1.打开node官网下载对应版本的文件&quot;&gt;&lt;/a&gt;1.打开node官网下载对应版本的文件&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://nodejs.cn/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node下载地址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;解压命令：tar-xvJf-tar-xz&quot;&gt;&lt;a href=&quot;#解压命令：tar-xvJf-tar-xz&quot; class=&quot;headerlink&quot; title=&quot;解压命令：tar xvJf ***.tar.xz&quot;&gt;&lt;/a&gt;解压命令：tar xvJf ***.tar.xz&lt;/h4&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://didid.top/blog/categories/Linux/"/>
    
    
      <category term="node" scheme="http://didid.top/blog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>进程锁</title>
    <link href="http://didid.top/blog/2020/01/14/%E8%BF%9B%E7%A8%8B%E9%94%81/"/>
    <id>http://didid.top/blog/2020/01/14/进程锁/</id>
    <published>2020-01-14T12:21:26.000Z</published>
    <updated>2020-01-14T12:27:08.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程锁框架"><a href="#进程锁框架" class="headerlink" title="进程锁框架"></a>进程锁框架</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>该代码适用于多进程中需要保证每个进程独立运行,并且某段代码只需要随机任意一个进程执行一次即可的情景.</p><p>原理:当多个进程都进入该段代码.某一个进程会创建文件并写入自己的pid,其他进程过来发现文件已创建就会将自己进程杀死,以实现多进程只执行一次该代码的逻辑</p><a id="more"></a><h3 id="2-进程锁框架代码"><a href="#2-进程锁框架代码" class="headerlink" title="2.进程锁框架代码"></a>2.进程锁框架代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProcessLock</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">""" only one process can run, others will wait until that done.</span></span><br><span class="line"><span class="string">    with ProcessLock(filename='tmp.lock'):</span></span><br><span class="line"><span class="string">        do something</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filename=None)</span>:</span></span><br><span class="line">        self.filename = filename <span class="keyword">or</span> <span class="string">'alockfile.lock'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">status</span><span class="params">(self)</span>:</span></span><br><span class="line">        pid = str(os.getpid())</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># "x"模式创建文件并写入,如果文件已存在会报错</span></span><br><span class="line">                <span class="keyword">with</span> open(self.filename, <span class="string">'x'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(pid)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">except</span> FileExistsError:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">with</span> open(self.filename) <span class="keyword">as</span> f:</span><br><span class="line">                        epid = f.read()</span><br><span class="line">                    <span class="keyword">if</span> epid.isdigit():</span><br><span class="line">                        epid = int(epid)</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            os.kill(epid, <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">except</span> ProcessLookupError:</span><br><span class="line">                            <span class="comment"># 用于删除文件,如果文件是一个目录则返回一个错误</span></span><br><span class="line">                            os.unlink(self.filename)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        os.unlink(self.filename)</span><br><span class="line">                <span class="keyword">except</span> Exception:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">finally</span>:</span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> ProcessLock().status:</span><br><span class="line">        print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;进程锁框架&quot;&gt;&lt;a href=&quot;#进程锁框架&quot; class=&quot;headerlink&quot; title=&quot;进程锁框架&quot;&gt;&lt;/a&gt;进程锁框架&lt;/h2&gt;&lt;h3 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.介绍&quot;&gt;&lt;/a&gt;1.介绍&lt;/h3&gt;&lt;p&gt;该代码适用于多进程中需要保证每个进程独立运行,并且某段代码只需要随机任意一个进程执行一次即可的情景.&lt;/p&gt;
&lt;p&gt;原理:当多个进程都进入该段代码.某一个进程会创建文件并写入自己的pid,其他进程过来发现文件已创建就会将自己进程杀死,以实现多进程只执行一次该代码的逻辑&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://didid.top/blog/categories/Python/"/>
    
    
      <category term="线程与进程" scheme="http://didid.top/blog/tags/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="http://didid.top/blog/2020/01/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://didid.top/blog/2020/01/14/多线程/</id>
    <published>2020-01-14T12:21:17.000Z</published>
    <updated>2020-01-14T12:28:05.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多线程的使用"><a href="#多线程的使用" class="headerlink" title="多线程的使用"></a>多线程的使用</h2><h3 id="1-创建多线程"><a href="#1-创建多线程" class="headerlink" title="1.创建多线程"></a>1.创建多线程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># target=?为任务名(方法名)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(start=None, end=None)</span>:</span></span><br><span class="line">    q = Queue(maxsize=<span class="number">100</span>)</span><br><span class="line">    p = threading.Thread(target=produce, args=(q, start, end))</span><br><span class="line">    p.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        w = threading.Thread(target=worker, args=(q,))</span><br><span class="line">        w.setDaemon(<span class="literal">True</span>)</span><br><span class="line">        w.start()</span><br><span class="line"><span class="comment"># queue.join()阻塞等待队列中任务全部处理完毕，配合queue.task_done使用</span></span><br><span class="line">    p.join()</span><br><span class="line">    q.join()</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-创建任务"><a href="#2-创建任务" class="headerlink" title="2.创建任务"></a>2.创建任务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># queue.put()为放入数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">produce</span><span class="params">(queue: Queue, start=None, end=None)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> src_object:</span><br><span class="line">        <span class="keyword">if</span> i[<span class="string">'id'</span>] <span class="keyword">in</span> exist_ids:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        queue.put(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># queue.get()为获取数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(queue)</span>:</span></span><br><span class="line">i = queue.get()</span><br><span class="line">    <span class="comment"># 当get方法调用数据完成后就可以使用task_done方法让调用queue.join()的线程返回,证明任务执行完毕</span></span><br><span class="line">    queue.task_done()</span><br></pre></td></tr></table></figure><h3 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a>3.小结</h3><p>queue.put()：申请获得互斥锁，获得后，如果队列未满，则向队列中添加数据，并通知notify其它阻塞的某个线程，唤醒等待获取require互斥锁。如果队列已满，则会wait等待。最后处理完成后释放互斥锁。其中还有阻塞block以及非阻塞，超时等逻辑。</p><p>queue.get()：从队列中获取任务，并且从队列中移除此任务。首先尝试获取互斥锁，获取成功则队列中get任务，如果此时队列为空，则wait等待生产者线程添加数据。get到任务后，会调用self.not_full.notify()通知生产者线程，队列可以添加元素了。最后释放互斥锁。</p><p>queue.task_done()：消费者线程从队列中get到任务后，任务处理完成，当所有的队列中的任务处理完成后，会使调用queue.join()的线程返回，表示队列中任务以处理完毕。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;多线程的使用&quot;&gt;&lt;a href=&quot;#多线程的使用&quot; class=&quot;headerlink&quot; title=&quot;多线程的使用&quot;&gt;&lt;/a&gt;多线程的使用&lt;/h2&gt;&lt;h3 id=&quot;1-创建多线程&quot;&gt;&lt;a href=&quot;#1-创建多线程&quot; class=&quot;headerlink&quot; title=&quot;1.创建多线程&quot;&gt;&lt;/a&gt;1.创建多线程&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# target=?为任务名(方法名)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(start=None, end=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    q = Queue(maxsize=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = threading.Thread(target=produce, args=(q, start, end))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        w = threading.Thread(target=worker, args=(q,))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        w.setDaemon(&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        w.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# queue.join()阻塞等待队列中任务全部处理完毕，配合queue.task_done使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.join()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    q.join()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://didid.top/blog/categories/Python/"/>
    
    
      <category term="线程与进程" scheme="http://didid.top/blog/tags/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>错误日志以及邮件</title>
    <link href="http://didid.top/blog/2020/01/14/%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97%E4%BB%A5%E5%8F%8A%E9%82%AE%E4%BB%B6/"/>
    <id>http://didid.top/blog/2020/01/14/错误日志以及邮件/</id>
    <published>2020-01-14T12:21:12.000Z</published>
    <updated>2020-01-14T12:27:58.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="错误日志以及邮件报警"><a href="#错误日志以及邮件报警" class="headerlink" title="错误日志以及邮件报警"></a>错误日志以及邮件报警</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>错误日志分为不同等级,error等级发邮件,info打印控制台以及写入文件</p><p>邮件发送为5分钟一次,将错误内容上传到kafka然后5分钟消费一次,统一发送</p><a id="more"></a><h3 id="2-应用"><a href="#2-应用" class="headerlink" title="2.应用"></a>2.应用</h3><h4 id="1-Config中配置-config-py"><a href="#1-Config中配置-config-py" class="headerlink" title="(1)Config中配置(config.py)"></a>(1)Config中配置(config.py)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mail_topic = <span class="string">'mail_service'</span> <span class="comment"># kafkatopic</span></span><br><span class="line">mail_title = <span class="string">'xxx'</span> <span class="comment"># 邮件标题</span></span><br><span class="line">send_mail = <span class="literal">False</span> <span class="comment"># 是否发送邮件</span></span><br><span class="line">logger_level = logging.DEBUG <span class="comment"># 日志级别</span></span><br><span class="line">kafka_producer_config = dict(</span><br><span class="line">        bootstrap_servers=[服务器IP:端口号],</span><br><span class="line">        security_protocol=<span class="string">'SASL_SSL'</span>, <span class="comment"># 安全协议</span></span><br><span class="line">        sasl_mechanism=<span class="string">"PLAIN"</span>, <span class="comment"># 机制</span></span><br><span class="line">        ssl_context=context,</span><br><span class="line">        sasl_plain_username=<span class="string">'用户名'</span>,</span><br><span class="line">        sasl_plain_password=<span class="string">'密码'</span>,</span><br><span class="line">        <span class="comment"># api_version=(1, 10),</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h4 id="2-日志代码-handler-py"><a href="#2-日志代码-handler-py" class="headerlink" title="(2)日志代码(handler.py)"></a>(2)日志代码(handler.py)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> StreamHandler, Formatter, FileHandler</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> common.mail_producer <span class="keyword">import</span> MailHandler, MailProducer</span><br><span class="line"></span><br><span class="line">logging_format = <span class="string">"[%(asctime)s]-[%(levelname)s] &lt;-%(filename)s-%(funcName)s-line %(lineno)s&gt;: %(message)s"</span></span><br><span class="line">datefmt = <span class="literal">None</span></span><br><span class="line">level = Config.logger_level</span><br><span class="line">mail_handler = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeFileHandler</span><span class="params">(FileHandler)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A handler class which writes formatted logging records to files with date.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filename, mode=<span class="string">'a'</span>, encoding=None, delay=False, when=<span class="string">'d'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param filename: test</span></span><br><span class="line"><span class="string">        :param mode:</span></span><br><span class="line"><span class="string">        :param encoding:</span></span><br><span class="line"><span class="string">        :param delay:</span></span><br><span class="line"><span class="string">        :param when: create log file with time format,</span></span><br><span class="line"><span class="string">                y: year</span></span><br><span class="line"><span class="string">                m: month</span></span><br><span class="line"><span class="string">                d: day</span></span><br><span class="line"><span class="string">                w: week</span></span><br><span class="line"><span class="string">                H: hour</span></span><br><span class="line"><span class="string">                M: minute</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.date = self.__get_current_date(when)</span><br><span class="line">        self.filename = filename</span><br><span class="line">        self.mode = mode</span><br><span class="line">        self.encoding = encoding</span><br><span class="line">        self.delay = delay</span><br><span class="line">        self.when = when</span><br><span class="line">        filename = <span class="string">f'<span class="subst">&#123;filename&#125;</span>_<span class="subst">&#123;self.date&#125;</span>.log'</span></span><br><span class="line">        self.baseFilename = os.path.abspath(filename)</span><br><span class="line">        FileHandler.__init__(self, filename, mode, encoding, delay)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get_current_date</span><span class="params">(when)</span>:</span></span><br><span class="line">        now = datetime.datetime.now()</span><br><span class="line">        <span class="keyword">if</span> when == <span class="string">'d'</span>:</span><br><span class="line">            date = now.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">        <span class="keyword">elif</span> when == <span class="string">'w'</span>:</span><br><span class="line">            w = int(now.strftime(<span class="string">'%w'</span>))</span><br><span class="line">            start = datetime.datetime(now.year, now.month, now.day) - datetime.timedelta(days=w<span class="number">-1</span>)</span><br><span class="line">            date = start.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">        <span class="keyword">elif</span> when == <span class="string">'m'</span>:</span><br><span class="line">            start = datetime.datetime(now.year, now.month, <span class="number">1</span>)</span><br><span class="line">            date = start.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">        <span class="keyword">elif</span> when == <span class="string">'y'</span>:</span><br><span class="line">            start = datetime.datetime(now.year, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            date = start.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">        <span class="keyword">elif</span> when == <span class="string">'H'</span>:</span><br><span class="line">            date = now.strftime(<span class="string">'%Y-%m-%d_%H'</span>)</span><br><span class="line">        <span class="keyword">elif</span> when == <span class="string">'M'</span>:</span><br><span class="line">            date = now.strftime(<span class="string">'%Y-%m-%d_%H-%M'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            date = now.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> date</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">emit</span><span class="params">(self, record)</span>:</span></span><br><span class="line">        date = self.__get_current_date(self.when)</span><br><span class="line">        <span class="keyword">if</span> date != self.date:</span><br><span class="line">            self.date = date</span><br><span class="line">            filename = <span class="string">f'<span class="subst">&#123;self.filename&#125;</span>_<span class="subst">&#123;self.date&#125;</span>.log'</span></span><br><span class="line">            self.baseFilename = os.path.abspath(filename)</span><br><span class="line">            self.stream = self._open()</span><br><span class="line"></span><br><span class="line">        FileHandler.emit(self, record)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_open</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Open the current base file with the (original) mode and encoding.</span></span><br><span class="line"><span class="string">        Return the resulting stream.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> open(self.baseFilename, self.mode, encoding=self.encoding)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stream_handler</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 屏幕显示</span></span><br><span class="line">    stream_handler = StreamHandler()</span><br><span class="line">    stream_handler.setLevel(level)</span><br><span class="line">    stream_handler.setFormatter(</span><br><span class="line">        Formatter(logging_format, datefmt),</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> stream_handler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_handler</span><span class="params">(filename)</span>:</span></span><br><span class="line">    file_handler = TimeFileHandler(filename)</span><br><span class="line">    file_handler.setLevel(level)</span><br><span class="line">    file_handler.setFormatter(</span><br><span class="line">        Formatter(logging_format, datefmt),</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> file_handler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mail_handler</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># error级别的log发送邮件</span></span><br><span class="line">    <span class="keyword">global</span> mail_handler</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> mail_handler:</span><br><span class="line">        mail_handler = MailHandler(topic=Config.mail_topic,</span><br><span class="line">                                   title=Config.mail_title,</span><br><span class="line">                                   **Config.kafka_producer_config)</span><br><span class="line">        mail_handler.setLevel(logging.ERROR)</span><br><span class="line">        mail_handler.setFormatter(</span><br><span class="line">            Formatter(logging_format, datefmt),</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> mail_handler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_logger</span><span class="params">(name=<span class="string">'root'</span>, send_mail=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param name: logger 名字</span></span><br><span class="line"><span class="string">    :param send_mail: 是否在发生严重错误时候发送邮件</span></span><br><span class="line"><span class="string">    :param level: 记录log级别</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    base_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), <span class="string">'logs'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(base_dir):</span><br><span class="line">        os.mkdir(base_dir)</span><br><span class="line">    filename = os.path.join(base_dir, name)</span><br><span class="line"></span><br><span class="line">    logger = logging.getLogger(name)</span><br><span class="line">    logger.setLevel(level)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 屏幕显示</span></span><br><span class="line">    stream_handler = get_stream_handler()</span><br><span class="line">    logger.addHandler(stream_handler)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 文件记录</span></span><br><span class="line">    file_handler = get_file_handler(filename)</span><br><span class="line">    logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> send_mail:</span><br><span class="line">        logger.addHandler(get_mail_handler())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root_logger = get_logger(<span class="string">'root'</span>, send_mail=<span class="literal">True</span>)</span><br><span class="line">consumer_logger1 = get_logger(<span class="string">'consumer1'</span>, send_mail=<span class="literal">True</span>)</span><br><span class="line">consumer_logger2 = get_logger(<span class="string">'consumer2'</span>, send_mail=<span class="literal">True</span>)</span><br><span class="line">consumer_logger3 = get_logger(<span class="string">'consumer3'</span>, send_mail=<span class="literal">True</span>)</span><br><span class="line">spider_logger = get_logger(<span class="string">'spider'</span>, send_mail=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">mail_producer = MailProducer(</span><br><span class="line">    topic=Config.mail_topic,</span><br><span class="line">    title=Config.mail_title,</span><br><span class="line">    send_mail=Config.send_mail,</span><br><span class="line">    **Config.kafka_producer_config,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    consumer_logger1.critical(<span class="string">'实时任务发生错误'</span>)</span><br><span class="line">    mail_producer.send(<span class="string">'手动发送邮件10000'</span>, code=<span class="number">10000</span>)</span><br><span class="line">    mail_producer.send(<span class="string">'手动发送邮件10000'</span>, code=<span class="number">10000</span>)</span><br><span class="line">    mail_producer.send(<span class="string">'手动发送邮件10001'</span>, code=<span class="number">10001</span>)</span><br></pre></td></tr></table></figure><h4 id="3-邮件发送"><a href="#3-邮件发送" class="headerlink" title="(3)邮件发送"></a>(3)邮件发送</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> aiokafka <span class="keyword">import</span> AIOKafkaConsumer</span><br><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP_SSL</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> FileHandler, Formatter, StreamHandler</span><br><span class="line"></span><br><span class="line">LOG_FILE = <span class="string">'mail.log'</span></span><br><span class="line"><span class="comment"># 定时5分钟发一次</span></span><br><span class="line">TIME_DELTA = <span class="number">5</span> * <span class="number">60</span></span><br><span class="line"></span><br><span class="line">context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)</span><br><span class="line">context.verify_mode = ssl.CERT_REQUIRED</span><br><span class="line">cafile = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) + <span class="string">"/ca-cert"</span></span><br><span class="line">context.load_verify_locations(cafile)</span><br><span class="line">kafka_config = dict(</span><br><span class="line">        bootstrap_servers=[服务器IP:端口号],</span><br><span class="line">        security_protocol=<span class="string">'SASL_SSL'</span>, <span class="comment"># 安全协议</span></span><br><span class="line">        sasl_mechanism=<span class="string">"PLAIN"</span>, <span class="comment"># 机制</span></span><br><span class="line">        ssl_context=context,</span><br><span class="line">        sasl_plain_username=<span class="string">'用户名'</span>,</span><br><span class="line">        sasl_plain_password=<span class="string">'密码'</span>,</span><br><span class="line">        <span class="comment"># api_version=(1, 10),</span></span><br><span class="line">     group_id=<span class="string">'xxx-mail-service-test'</span></span><br><span class="line">    )</span><br><span class="line">TOPIC = <span class="string">'mail_service'</span></span><br><span class="line"></span><br><span class="line">MAIL_HOST = <span class="string">'smtp.qiye.163.com'</span></span><br><span class="line">MAIL_PORT = <span class="number">465</span></span><br><span class="line">USER = <span class="string">'xxx@163.cn'</span></span><br><span class="line">PASSWORD = <span class="string">'xxx'</span></span><br><span class="line"></span><br><span class="line">PROJ_CONF = &#123;</span><br><span class="line">    <span class="string">'default'</span>: dict(</span><br><span class="line">        from_addr=<span class="string">'xxx@163.cn'</span>,</span><br><span class="line">        to_addr=[<span class="string">'xxx@163.cn'</span>],</span><br><span class="line">        title=<span class="string">'报警系统'</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'新行情'</span>: dict(</span><br><span class="line">        from_addr=<span class="string">'xxx@163.cn'</span>,</span><br><span class="line">        to_addr=[<span class="string">'xxx@163.cn'</span>, <span class="string">'xxx@163.cn'</span>],</span><br><span class="line">        title=<span class="string">'xxx报警系统'</span></span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logger = logging.Logger(__file__)</span><br><span class="line">logging_format = <span class="string">"[%(asctime)s]-[%(levelname)s] &lt;-%(filename)s-%(funcName)s-line %(lineno)s&gt;: %(message)s"</span></span><br><span class="line">datefmt = <span class="string">'%Y-%m-%d  %H:%M:%S'</span></span><br><span class="line">log_config = dict(</span><br><span class="line">    datefmt=datefmt,</span><br><span class="line">    format=logging_format,</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">)</span><br><span class="line">stream_handler = StreamHandler()</span><br><span class="line">stream_handler.setLevel(logging.DEBUG)</span><br><span class="line">stream_handler.setFormatter(</span><br><span class="line">    Formatter(logging_format, datefmt),</span><br><span class="line">)</span><br><span class="line">logger.addHandler(stream_handler)</span><br><span class="line">file_handler = FileHandler(LOG_FILE)</span><br><span class="line">file_handler.setLevel(logging.DEBUG)</span><br><span class="line">file_handler.setFormatter(</span><br><span class="line">    Formatter(logging_format, datefmt),</span><br><span class="line">)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">mail_consumer</span><span class="params">(topic, queue: asyncio.Queue, **kwargs)</span>:</span></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    consumer = AIOKafkaConsumer(topic, loop=loop, **kwargs)</span><br><span class="line">    <span class="keyword">await</span> consumer.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">for</span> msg <span class="keyword">in</span> consumer:</span><br><span class="line">        print(msg)</span><br><span class="line">        value = msg.value</span><br><span class="line">        logger.info(value)</span><br><span class="line">        <span class="keyword">await</span> queue.put(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(queue: asyncio.Queue)</span>:</span></span><br><span class="line">    msg_obj = OrderedDict()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            value = queue.get_nowait()</span><br><span class="line">            data = json.loads(value)</span><br><span class="line">            title = data.get(<span class="string">'title'</span>) <span class="keyword">or</span> PROJ_CONF.get(<span class="string">'default'</span>).get(<span class="string">'title'</span>)</span><br><span class="line">            code = data.get(<span class="string">'code'</span>) <span class="keyword">or</span> uuid.uuid1().hex</span><br><span class="line">            content = data.get(<span class="string">'content'</span>) <span class="keyword">or</span> json.dumps(data)</span><br><span class="line"></span><br><span class="line">            one = msg_obj.setdefault(title, OrderedDict())</span><br><span class="line">            one.setdefault(code, content)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> asyncio.QueueEmpty:</span><br><span class="line">            <span class="keyword">if</span> msg_obj:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    logger.info(msg_obj)</span><br><span class="line">                    <span class="keyword">for</span> title, one <span class="keyword">in</span> msg_obj.items():</span><br><span class="line">                        contents = <span class="string">'\n'</span>.join(list(one.values()))</span><br><span class="line"></span><br><span class="line">                        message = MIMEText(contents, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">                        message[<span class="string">'Subject'</span>] = PROJ_CONF.get(title, &#123;&#125;).get(<span class="string">'title'</span>) <span class="keyword">or</span> title</span><br><span class="line">                        from_addr = PROJ_CONF.get(title, &#123;&#125;).get(<span class="string">'from_addr'</span>) <span class="keyword">or</span> PROJ_CONF.get(<span class="string">'default'</span>).get(</span><br><span class="line">                            <span class="string">'from_addr'</span>)</span><br><span class="line">                        to_addrs = PROJ_CONF.get(title, &#123;&#125;).get(<span class="string">'to_addr'</span>) <span class="keyword">or</span> PROJ_CONF.get(<span class="string">'default'</span>).get(<span class="string">'to_addr'</span>)</span><br><span class="line">                        message[<span class="string">'From'</span>] = from_addr</span><br><span class="line">                        <span class="keyword">if</span> isinstance(to_addrs, list):</span><br><span class="line">                            message[<span class="string">'To'</span>] = <span class="string">','</span>.join(to_addrs)</span><br><span class="line">                        <span class="keyword">elif</span> isinstance(to_addrs, str):</span><br><span class="line">                            message[<span class="string">'To'</span>] = to_addrs</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            logger.error(<span class="string">'发送地址是非法的: %s'</span>% to_addrs)</span><br><span class="line"></span><br><span class="line">                        smtp = SMTP_SSL(</span><br><span class="line">                            host=MAIL_HOST,</span><br><span class="line">                            port=MAIL_PORT,</span><br><span class="line">                        )</span><br><span class="line">                        smtp.login(</span><br><span class="line">                            user=USER,</span><br><span class="line">                            password=PASSWORD,</span><br><span class="line">                        )</span><br><span class="line">                        smtp.sendmail(from_addr, to_addrs, message.as_string())</span><br><span class="line">                        logger.info(<span class="string">'发送邮件成功'</span>)</span><br><span class="line">                    msg_obj.clear()</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    logger.error(e)</span><br><span class="line">                    logger.error(traceback.print_exc())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(TIME_DELTA)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    logger.info(<span class="string">'服务启动'</span>)</span><br><span class="line">    q = asyncio.Queue()</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(</span><br><span class="line">        mail_consumer(topic=TOPIC, queue=q, **kafka_config),</span><br><span class="line">        send(queue=q)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><h4 id="4-工具类-整合重复的报错-mail-producer-py"><a href="#4-工具类-整合重复的报错-mail-producer-py" class="headerlink" title="(4)工具类-整合重复的报错(mail_producer.py)"></a>(4)工具类-整合重复的报错(mail_producer.py)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> kafka <span class="keyword">import</span> KafkaProducer</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailProducer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, topic, title, send_mail=True, **kwargs, )</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param topic: kafka 邮件的topic</span></span><br><span class="line"><span class="string">        :param title: 邮件按照title分类， 服务端会根据title找到对应收件人邮箱</span></span><br><span class="line"><span class="string">        :param kwargs: kafka的配置</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.topic = topic</span><br><span class="line">        self.title = title</span><br><span class="line">        self.send_mail = send_mail</span><br><span class="line">        self.producer = KafkaProducer(**kwargs)</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, content: str, code=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param content:</span></span><br><span class="line"><span class="string">        :param code:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.send_mail:</span><br><span class="line">            v = &#123;</span><br><span class="line">                <span class="string">'title'</span>: self.title,</span><br><span class="line">                <span class="string">'code'</span>: code,</span><br><span class="line">                <span class="string">'content'</span>: content</span><br><span class="line">            &#125;</span><br><span class="line">            value = json.dumps(v).encode(<span class="string">'utf8'</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                future = self.producer.send(self.topic, value)</span><br><span class="line">                future.get(timeout=<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                producer = KafkaProducer(**self.kwargs)</span><br><span class="line">                future = producer.send(self.topic, value)</span><br><span class="line">                future.get(timeout=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailHandler</span><span class="params">(logging.Handler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, topic, title=None, **kafka_config)</span>:</span></span><br><span class="line">        logging.Handler.__init__(self)</span><br><span class="line">        self.mail_producer = MailProducer(topic=topic,</span><br><span class="line">                                          title=title,</span><br><span class="line">                                          **kafka_config</span><br><span class="line">                                          )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">emit</span><span class="params">(self, record)</span>:</span></span><br><span class="line">        msg = self.format(record)</span><br><span class="line">        self.mail_producer.send(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)</span><br><span class="line">    context.verify_mode = ssl.CERT_REQUIRED</span><br><span class="line">    cafile = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) + <span class="string">"/ca-cert"</span></span><br><span class="line">    context.load_verify_locations(cafile)</span><br><span class="line">kafka_producer_config = dict(</span><br><span class="line">        bootstrap_servers=[服务器IP:端口号],</span><br><span class="line">        security_protocol=<span class="string">'SASL_SSL'</span>, <span class="comment"># 安全协议</span></span><br><span class="line">        sasl_mechanism=<span class="string">"PLAIN"</span>, <span class="comment"># 机制</span></span><br><span class="line">        ssl_context=context,</span><br><span class="line">        sasl_plain_username=<span class="string">'用户名'</span>,</span><br><span class="line">        sasl_plain_password=<span class="string">'密码'</span>,</span><br><span class="line">        <span class="comment"># api_version=(1, 10),</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送邮件</span></span><br><span class="line">    mail_producer = MailProducer(topic=<span class="string">'mail_service'</span>,</span><br><span class="line">                                 title=<span class="string">''</span>,</span><br><span class="line">                                 **kafka_config</span><br><span class="line">                                 )</span><br><span class="line"></span><br><span class="line">    mail_producer.send(<span class="string">'你好'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;错误日志以及邮件报警&quot;&gt;&lt;a href=&quot;#错误日志以及邮件报警&quot; class=&quot;headerlink&quot; title=&quot;错误日志以及邮件报警&quot;&gt;&lt;/a&gt;错误日志以及邮件报警&lt;/h2&gt;&lt;h3 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.介绍&quot;&gt;&lt;/a&gt;1.介绍&lt;/h3&gt;&lt;p&gt;错误日志分为不同等级,error等级发邮件,info打印控制台以及写入文件&lt;/p&gt;
&lt;p&gt;邮件发送为5分钟一次,将错误内容上传到kafka然后5分钟消费一次,统一发送&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://didid.top/blog/categories/Python/"/>
    
    
      <category term="logger" scheme="http://didid.top/blog/tags/logger/"/>
    
      <category term="mail" scheme="http://didid.top/blog/tags/mail/"/>
    
  </entry>
  
  <entry>
    <title>本地SSH连接内网redis和MongoDB</title>
    <link href="http://didid.top/blog/2020/01/14/%E6%9C%AC%E5%9C%B0SSH%E8%BF%9E%E6%8E%A5%E5%86%85%E7%BD%91redis%E5%92%8CMongoDB/"/>
    <id>http://didid.top/blog/2020/01/14/本地SSH连接内网redis和MongoDB/</id>
    <published>2020-01-14T12:21:01.000Z</published>
    <updated>2020-01-14T12:27:55.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-通过SSHTunnelForwarder隧道连接redis和MongoDB"><a href="#python-通过SSHTunnelForwarder隧道连接redis和MongoDB" class="headerlink" title="python 通过SSHTunnelForwarder隧道连接redis和MongoDB"></a>python 通过SSHTunnelForwarder隧道连接redis和MongoDB</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>该代码用于需要远程连接内网服务器上的redis或者MongoDB数据库时使用借助SSH搭建通道实现本地连接远程的数据库,方便本地调试</p><a id="more"></a><h3 id="2-模块代码"><a href="#2-模块代码" class="headerlink" title="2.模块代码"></a>2.模块代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server = SSHTunnelForwarder(</span><br><span class="line">        ssh_address_or_host=<span class="string">'xxx'</span>,  <span class="comment"># ssh地址</span></span><br><span class="line">        ssh_username=<span class="string">'xxx'</span>,  <span class="comment"># ssh连接的用户名</span></span><br><span class="line">        ssh_password=<span class="string">'xxx'</span>,  <span class="comment"># ssh连接的用户名</span></span><br><span class="line">        remote_bind_addresses=[(<span class="string">'redis地址'</span>, <span class="number">6379</span>),</span><br><span class="line">                               (<span class="string">'mongoDB地址'</span>, MongoDB端口号)],</span><br><span class="line">        local_bind_addresses=[(<span class="string">'127.0.0.1'</span>, <span class="number">10005</span>),</span><br><span class="line">                              (<span class="string">'127.0.0.1'</span>, <span class="number">13717</span>)]</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> env == <span class="string">'local'</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            server.start()</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    redis_config = &#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">10005</span>,</span><br><span class="line">        <span class="string">'db'</span>: <span class="number">22</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'xxx'</span>,</span><br><span class="line">        <span class="string">'decode_responses'</span>: <span class="literal">True</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python-通过SSHTunnelForwarder隧道连接redis和MongoDB&quot;&gt;&lt;a href=&quot;#python-通过SSHTunnelForwarder隧道连接redis和MongoDB&quot; class=&quot;headerlink&quot; title=&quot;python 通过SSHTunnelForwarder隧道连接redis和MongoDB&quot;&gt;&lt;/a&gt;python 通过SSHTunnelForwarder隧道连接redis和MongoDB&lt;/h2&gt;&lt;h3 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.介绍&quot;&gt;&lt;/a&gt;1.介绍&lt;/h3&gt;&lt;p&gt;该代码用于需要远程连接内网服务器上的redis或者MongoDB数据库时使用借助SSH搭建通道实现本地连接远程的数据库,方便本地调试&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://didid.top/blog/categories/Python/"/>
    
    
      <category term="SSH" scheme="http://didid.top/blog/tags/SSH/"/>
    
      <category term="redis" scheme="http://didid.top/blog/tags/redis/"/>
    
      <category term="MongoDB" scheme="http://didid.top/blog/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>socket长连接通讯</title>
    <link href="http://didid.top/blog/2020/01/14/socket%E9%95%BF%E8%BF%9E%E6%8E%A5%E9%80%9A%E8%AE%AF/"/>
    <id>http://didid.top/blog/2020/01/14/socket长连接通讯/</id>
    <published>2020-01-14T12:20:43.000Z</published>
    <updated>2020-01-14T12:20:43.789Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>oss的应用</title>
    <link href="http://didid.top/blog/2020/01/14/oss%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://didid.top/blog/2020/01/14/oss的应用/</id>
    <published>2020-01-14T12:20:33.000Z</published>
    <updated>2020-01-14T12:27:47.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OSS使用"><a href="#OSS使用" class="headerlink" title="OSS使用"></a>OSS使用</h2><h3 id="1-获取bucketID-bucketKEY-URL等信息"><a href="#1-获取bucketID-bucketKEY-URL等信息" class="headerlink" title="1.获取bucketID,bucketKEY,URL等信息"></a>1.获取bucketID,bucketKEY,URL等信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># oss</span></span><br><span class="line">OSS_BUCKET_NAME = <span class="string">'xxx'</span> <span class="comment"># bucket_name</span></span><br><span class="line">OSS_URL = <span class="string">'xxx'</span> <span class="comment"># 外网内容查看URL</span></span><br><span class="line">file_dir = <span class="string">''</span> <span class="comment"># 存储路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象存储</span></span><br><span class="line">AccessKeyID = <span class="string">'xxx'</span> <span class="comment"># ID</span></span><br><span class="line">AccessKeySecret = <span class="string">'xxx'</span> <span class="comment"># KEY</span></span><br><span class="line">OSS_ENDPOINT = <span class="string">"xxx"</span> <span class="comment"># OSS访问地址</span></span><br><span class="line">(记得ENDPOINT中加-internal是内网访问地址)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-上传文件"><a href="#2-上传文件" class="headerlink" title="2.上传文件"></a>2.上传文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OssBucket</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key, secret, bucket_name, endpoint)</span>:</span></span><br><span class="line">        self.auth = oss2.Auth(key, secret)</span><br><span class="line">        self.bucket = oss2.Bucket(self.auth, endpoint, bucket_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上传内容(key为上传到oss的目录,content为内容)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_content</span><span class="params">(self, key, content)</span>:</span></span><br><span class="line">        res = self.bucket.put_object(key, content)</span><br><span class="line">        <span class="keyword">if</span> res.status == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> key</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.error(<span class="string">f'上传阿里云失败 <span class="subst">&#123;key&#125;</span>'</span>)</span><br><span class="line">            <span class="keyword">raise</span> Exception</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上传文件(key为上传到oss的目录,file为文件路径)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">(self, key, file)</span>:</span></span><br><span class="line">        res = self.bucket.put_object_from_file(key, file)</span><br><span class="line">        <span class="keyword">if</span> res.status == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> key</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.error(<span class="string">f'上传阿里云失败 <span class="subst">&#123;key&#125;</span>'</span>)</span><br><span class="line">            <span class="keyword">raise</span> Exception</span><br></pre></td></tr></table></figure><h3 id="3-返回res结果"><a href="#3-返回res结果" class="headerlink" title="3.返回res结果"></a>3.返回res结果</h3><p>根据返回的res.status是否为200判断是否上传成功</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;OSS使用&quot;&gt;&lt;a href=&quot;#OSS使用&quot; class=&quot;headerlink&quot; title=&quot;OSS使用&quot;&gt;&lt;/a&gt;OSS使用&lt;/h2&gt;&lt;h3 id=&quot;1-获取bucketID-bucketKEY-URL等信息&quot;&gt;&lt;a href=&quot;#1-获取bucketID-bucketKEY-URL等信息&quot; class=&quot;headerlink&quot; title=&quot;1.获取bucketID,bucketKEY,URL等信息&quot;&gt;&lt;/a&gt;1.获取bucketID,bucketKEY,URL等信息&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# oss&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSS_BUCKET_NAME = &lt;span class=&quot;string&quot;&gt;&#39;xxx&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# bucket_name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSS_URL = &lt;span class=&quot;string&quot;&gt;&#39;xxx&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 外网内容查看URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;file_dir = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 存储路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 对象存储&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AccessKeyID = &lt;span class=&quot;string&quot;&gt;&#39;xxx&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AccessKeySecret = &lt;span class=&quot;string&quot;&gt;&#39;xxx&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# KEY&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSS_ENDPOINT = &lt;span class=&quot;string&quot;&gt;&quot;xxx&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# OSS访问地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(记得ENDPOINT中加-internal是内网访问地址)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://didid.top/blog/categories/Python/"/>
    
    
      <category term="oss" scheme="http://didid.top/blog/tags/oss/"/>
    
  </entry>
  
  <entry>
    <title>nginx+uwsgi部署项目</title>
    <link href="http://didid.top/blog/2020/01/14/nginx-uwsgi%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
    <id>http://didid.top/blog/2020/01/14/nginx-uwsgi部署项目/</id>
    <published>2020-01-14T12:20:21.000Z</published>
    <updated>2020-01-14T12:27:43.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nginx-uwsgi-django在云服务器上部署项目"><a href="#nginx-uwsgi-django在云服务器上部署项目" class="headerlink" title="nginx+uwsgi+django在云服务器上部署项目"></a>nginx+uwsgi+django在云服务器上部署项目</h2><h3 id="uwsgi"><a href="#uwsgi" class="headerlink" title="uwsgi"></a>uwsgi</h3><p>启动：uwsgi –ini uwsgi.ini</p><p>停止：uwsgi –stop uwsgi.pid</p><p>如果报错查看文件:vi uwsgi.log</p><p>停止如果还有剩余进程使用如下命令：pkill -f uwsgi -9</p><p>查看进程命令:ps aux | grep uwsgi</p><a id="more"></a><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>修改nginx配置文件：vi /usr/local/nginx/conf/nginx.conf</p><p>查看进程命令: ps aux | grep nginx</p><p>重启nginx服务：sudo /usr/local/nginx/sbin/nginx -s reload</p><p>停止nginx服务：sudo /usr/local/nginx/sbin/nginx -s stop</p><p>启动nginx服务：sudo /usr/local/nginx/sbin/nginx</p><p>查看nginx错误日志：vi /usr/local/nginx/logs/error.log</p><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>查看后10行：tail -n 10 文件名</p><h3 id="uwsgi配置"><a href="#uwsgi配置" class="headerlink" title="uwsgi配置"></a>uwsgi配置</h3><ul><li><p>1.在项目目录下创建uwsgi.ini文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="meta">#</span> 使用nginx连接（注意这里写的都是云服务器的内网IP）</span><br><span class="line"><span class="meta">#</span> socket=xxx:8000</span><br><span class="line"><span class="meta">#</span> 使用uwsgi部署</span><br><span class="line">http=xxx:8000</span><br><span class="line"><span class="meta">#</span> 项目目录注意不加引号</span><br><span class="line">chdir=/root/FanDong_Travel/TravelWeb/zhiqiTravel</span><br><span class="line"><span class="meta">#</span> 项目中wsgi.py文件路径</span><br><span class="line">wsgi-file=zhiqiTravel/wsgi.py</span><br><span class="line"><span class="meta">#</span> 进程数</span><br><span class="line">processes=4</span><br><span class="line"><span class="meta">#</span> 线程数</span><br><span class="line">threads=2</span><br><span class="line"><span class="meta">#</span> 存放进程编号的文件</span><br><span class="line">pidfile=uwsgi.pid</span><br><span class="line"><span class="meta">#</span> uwsgi日志</span><br><span class="line">daemonize=uwsgi.log</span><br><span class="line"><span class="meta">#</span> 虚拟环境</span><br><span class="line">virtualenv=/root/.virtualenvs/django2.1</span><br></pre></td></tr></table></figure></li><li><p>2.连接远程服务器，然后将本地文件上传</p></li><li><p>3.启动uwsgi.ini文件</p></li></ul><h3 id="nginx配置静态服务器和反向代理-负载均衡"><a href="#nginx配置静态服务器和反向代理-负载均衡" class="headerlink" title="nginx配置静态服务器和反向代理-负载均衡"></a>nginx配置静态服务器和反向代理-负载均衡</h3><ul><li><p>1.创建uwsgi2.ini文件，将端口号改为其他的例如8001之类的</p></li><li><p>2.启动uwsgi2.ini，使用ps aux | grep uwsgi查看是否启动了两个uwsgi</p></li><li><p>3.进入nginx的配置文件下修改配置/usr/local/nginx/conf/nginx.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 首先第一行修改为user root;需要root权限用户</span><br><span class="line"><span class="meta">#</span> 配置负载均衡使用的</span><br><span class="line">    upstream zhiqiTravel&#123;</span><br><span class="line">        server xxx:8000;</span><br><span class="line"></span><br><span class="line">        server xxx:8001;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">    # 注意修改这里的端口号</span><br><span class="line">        listen       8000;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            # 将所有的参数转到uwsgi下</span><br><span class="line">            include uwsgi_params;</span><br><span class="line">            # uwsgi的ip与端口</span><br><span class="line">            uwsgi_pass xxx:8000;</span><br><span class="line">            # 配置负载均衡</span><br><span class="line">            # uwsgi_pass zhiqiTravel;</span><br><span class="line">            # root   html;</span><br><span class="line">            # index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"># 配置静态文件</span><br><span class="line">        location /static &#123;</span><br><span class="line">            autoindex on;</span><br><span class="line">            # 注意如果是/目录使用root。其他使用alias</span><br><span class="line">            alias /root/FanDong_Travel/TravelWeb/zhiqiTravel/static/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /media &#123;</span><br><span class="line">            alias /root/FanDong_Travel/TravelWeb/zhiqiTravel/media/;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>4.注意将项目文件增加权限，chmod -R 777 项目文件：这里可能会产生一个问题</p><p>如果遇到静态文件加载不出来的问题，并且已经修改了nginx文件的情况下还是不行，那么就是你将文件放在root目录下，权限不够的问题，解决方案：</p><ul><li>1.将项目移出root目录</li><li>2.给root文件设置最高权限sudo chmod -R 777 root</li></ul></li><li><p>5.注意回到项目中manage.py文件所在的路径下执行：　python manage.py collectstatic然后输入yes，将django项目中的静态文件分离出来</p></li><li><p>6.重启uwsgi和nginx即可</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;nginx-uwsgi-django在云服务器上部署项目&quot;&gt;&lt;a href=&quot;#nginx-uwsgi-django在云服务器上部署项目&quot; class=&quot;headerlink&quot; title=&quot;nginx+uwsgi+django在云服务器上部署项目&quot;&gt;&lt;/a&gt;nginx+uwsgi+django在云服务器上部署项目&lt;/h2&gt;&lt;h3 id=&quot;uwsgi&quot;&gt;&lt;a href=&quot;#uwsgi&quot; class=&quot;headerlink&quot; title=&quot;uwsgi&quot;&gt;&lt;/a&gt;uwsgi&lt;/h3&gt;&lt;p&gt;启动：uwsgi –ini uwsgi.ini&lt;/p&gt;
&lt;p&gt;停止：uwsgi –stop uwsgi.pid&lt;/p&gt;
&lt;p&gt;如果报错查看文件:vi uwsgi.log&lt;/p&gt;
&lt;p&gt;停止如果还有剩余进程使用如下命令：pkill -f uwsgi -9&lt;/p&gt;
&lt;p&gt;查看进程命令:ps aux | grep uwsgi&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://didid.top/blog/categories/Python/"/>
    
    
      <category term="nginx" scheme="http://didid.top/blog/tags/nginx/"/>
    
      <category term="uwsgi" scheme="http://didid.top/blog/tags/uwsgi/"/>
    
  </entry>
  
  <entry>
    <title>kafka接入获取数据</title>
    <link href="http://didid.top/blog/2020/01/14/kafka%E6%8E%A5%E5%85%A5%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE/"/>
    <id>http://didid.top/blog/2020/01/14/kafka接入获取数据/</id>
    <published>2020-01-14T12:20:08.000Z</published>
    <updated>2020-01-14T12:28:21.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kafka接入获取数据"><a href="#kafka接入获取数据" class="headerlink" title="kafka接入获取数据"></a>kafka接入获取数据</h2><h3 id="1-kafka配置"><a href="#1-kafka配置" class="headerlink" title="1.kafka配置"></a>1.kafka配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">topic = <span class="string">'队列名'</span></span><br><span class="line">patch_topic = <span class="string">'quote_test_zyan'</span></span><br><span class="line">group_id_1 = <span class="string">'分组ID'</span></span><br><span class="line">group_id_2 = <span class="string">'分组ID'</span></span><br><span class="line">group_id_3 = <span class="string">'分组ID'</span></span><br><span class="line">kafka_producer_config = dict(</span><br><span class="line">        bootstrap_servers=[服务器IP:端口号],</span><br><span class="line">        security_protocol=<span class="string">'SASL_SSL'</span>, <span class="comment"># 安全协议</span></span><br><span class="line">        sasl_mechanism=<span class="string">"PLAIN"</span>, <span class="comment"># 机制</span></span><br><span class="line">        ssl_context=context,</span><br><span class="line">        sasl_plain_username=<span class="string">'用户名'</span>,</span><br><span class="line">        sasl_plain_password=<span class="string">'密码'</span>,</span><br><span class="line">        <span class="comment"># api_version=(1, 10),</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-连接kafka获取数据"><a href="#2-连接kafka获取数据" class="headerlink" title="2.连接kafka获取数据"></a>2.连接kafka获取数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">consume</span><span class="params">(queue, group_id)</span>:</span></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="comment"># 获取消费对象</span></span><br><span class="line">    consumer = AIOKafkaConsumer(Config.topic, loop=loop, **Config.kafka_producer_config, group_id=group_id)</span><br><span class="line">    <span class="comment"># 开始启动kafka</span></span><br><span class="line">    <span class="keyword">await</span> consumer.start()</span><br><span class="line">    <span class="comment"># 遍历获取到的数据,对数据进行简单处理以及筛选</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">for</span> msg <span class="keyword">in</span> consumer:</span><br><span class="line">        params = json.loads(msg.value.decode(<span class="string">'utf8'</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> params.get(<span class="string">'content'</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        data = params[<span class="string">'content'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">'trade_status'</span>] <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'OCALL'</span>, <span class="string">'TRADE'</span>, <span class="string">'ENDTR'</span>, <span class="string">'SUSP'</span>, <span class="string">'STOPT'</span>, <span class="string">'BREAK'</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 向获取到的数据添加自己特定字段(根据自己需求添加也可以不添加)</span></span><br><span class="line">        data.update(date=data[<span class="string">'market_date'</span>])</span><br><span class="line">        <span class="comment"># 加入异步</span></span><br><span class="line">        <span class="keyword">await</span> queue.put(data)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;kafka接入获取数据&quot;&gt;&lt;a href=&quot;#kafka接入获取数据&quot; class=&quot;headerlink&quot; title=&quot;kafka接入获取数据&quot;&gt;&lt;/a&gt;kafka接入获取数据&lt;/h2&gt;&lt;h3 id=&quot;1-kafka配置&quot;&gt;&lt;a href=&quot;#1-kafka配置&quot; class=&quot;headerlink&quot; title=&quot;1.kafka配置&quot;&gt;&lt;/a&gt;1.kafka配置&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;topic = &lt;span class=&quot;string&quot;&gt;&#39;队列名&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;patch_topic = &lt;span class=&quot;string&quot;&gt;&#39;quote_test_zyan&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;group_id_1 = &lt;span class=&quot;string&quot;&gt;&#39;分组ID&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;group_id_2 = &lt;span class=&quot;string&quot;&gt;&#39;分组ID&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;group_id_3 = &lt;span class=&quot;string&quot;&gt;&#39;分组ID&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kafka_producer_config = dict(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bootstrap_servers=[服务器IP:端口号],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        security_protocol=&lt;span class=&quot;string&quot;&gt;&#39;SASL_SSL&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# 安全协议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sasl_mechanism=&lt;span class=&quot;string&quot;&gt;&quot;PLAIN&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# 机制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ssl_context=context,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sasl_plain_username=&lt;span class=&quot;string&quot;&gt;&#39;用户名&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sasl_plain_password=&lt;span class=&quot;string&quot;&gt;&#39;密码&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# api_version=(1, 10),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://didid.top/blog/categories/Python/"/>
    
    
      <category term="kafka" scheme="http://didid.top/blog/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>asyncio异步</title>
    <link href="http://didid.top/blog/2020/01/14/asyncio%E5%BC%82%E6%AD%A5/"/>
    <id>http://didid.top/blog/2020/01/14/asyncio异步/</id>
    <published>2020-01-14T12:19:53.000Z</published>
    <updated>2020-01-14T12:28:17.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="asyncio异步I-O应用"><a href="#asyncio异步I-O应用" class="headerlink" title="asyncio异步I/O应用"></a>asyncio异步I/O应用</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>asyncio 是用来编写 <strong>并发</strong> 代码的库，使用 <strong>async/await</strong> 语法。</p><p>asyncio 被用作多个提供高性能 Python 异步框架的基础，包括网络和网站服务，数据库连接库，分布式任务队列等等。</p><p>asyncio 往往是构建 IO 密集型和高层级 <strong>结构化</strong> 网络代码的最佳选择。</p><p>使用场景:需要实时获取数据并对数据进行实时处理然后流出的情景.</p><a id="more"></a><h3 id="2-应用"><a href="#2-应用" class="headerlink" title="2.应用"></a>2.应用</h3><h4 id="1-从kafka获取数据-获取数据具体步骤见另一篇文章"><a href="#1-从kafka获取数据-获取数据具体步骤见另一篇文章" class="headerlink" title="(1)从kafka获取数据(获取数据具体步骤见另一篇文章)"></a>(1)从kafka获取数据(获取数据具体步骤见另一篇文章)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">first</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 设置最大连接数,如果为0则表示无上限</span></span><br><span class="line">    queue = asyncio.Queue(maxsize=<span class="number">20000</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(</span><br><span class="line">        <span class="comment"># 从kafka获取数据</span></span><br><span class="line">        consume(queue, Config.group_id_1),</span><br><span class="line">        pusher_first(queue)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h4 id="2-消费数据"><a href="#2-消费数据" class="headerlink" title="(2)消费数据"></a>(2)消费数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">pusher_first</span><span class="params">(queue)</span>:</span></span><br><span class="line"> <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 获取数据</span></span><br><span class="line">        data = <span class="keyword">await</span> queue.get()</span><br><span class="line">        <span class="comment"># 异步框架来对数据进行处理,然后以字典的形式返回</span></span><br><span class="line">        processing_data(data, register_funcs=REGISTER_FUNCTIONS_FIRST)</span><br></pre></td></tr></table></figure><h4 id="3-对数据进行处理"><a href="#3-对数据进行处理" class="headerlink" title="(3)对数据进行处理"></a>(3)对数据进行处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">processing_data</span><span class="params">(data, register_funcs)</span>:</span></span><br><span class="line">    <span class="comment"># 获取当前传入数据的股票类型</span></span><br><span class="line">    own_funcs = register_funcs.get(data.get(<span class="string">'secu_type'</span>), [])</span><br><span class="line">    <span class="comment"># 根据stage排序执行,当前默认由小到大</span></span><br><span class="line">    <span class="keyword">for</span> stage <span class="keyword">in</span> sorted(own_funcs.keys()):</span><br><span class="line">        fns = own_funcs[stage]</span><br><span class="line">        <span class="keyword">for</span> fn <span class="keyword">in</span> fns:</span><br><span class="line">            <span class="comment"># 传入数据</span></span><br><span class="line">            fn(data)</span><br><span class="line"></span><br><span class="line">REGISTER_FUNCTIONS_FIRST = dict()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_first</span><span class="params">(stage: int, types=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param types: 类别， 指数IND，股票SHARE，板块PLATE</span></span><br><span class="line"><span class="string">    :param stage: 方法排序用的， stage 小的先执行</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> types <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        types = [<span class="string">'SHARE'</span>, <span class="string">'IND'</span>, <span class="string">'PLATE'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> type(types) <span class="keyword">is</span> str:</span><br><span class="line">        types = [types]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(fn)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> types:</span><br><span class="line">            REGISTER_FUNCTIONS_FIRST.setdefault(t, dict()).setdefault(stage, list()).append(fn)</span><br><span class="line">        <span class="keyword">return</span> fn</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给想要处理的数据方法添加装饰器,第一个参数为执行顺序由小到大(1-10),第二个参数为数据类型(根据自己需求定)</span></span><br><span class="line"><span class="meta">@register_first(1, types='SHARE')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare_five</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="comment"># 业务逻辑</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a>3.小结</h3><p>注意:该异步框架不能和celery连用,同为异步,数据不互通</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;asyncio异步I-O应用&quot;&gt;&lt;a href=&quot;#asyncio异步I-O应用&quot; class=&quot;headerlink&quot; title=&quot;asyncio异步I/O应用&quot;&gt;&lt;/a&gt;asyncio异步I/O应用&lt;/h2&gt;&lt;h3 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.介绍&quot;&gt;&lt;/a&gt;1.介绍&lt;/h3&gt;&lt;p&gt;asyncio 是用来编写 &lt;strong&gt;并发&lt;/strong&gt; 代码的库，使用 &lt;strong&gt;async/await&lt;/strong&gt; 语法。&lt;/p&gt;
&lt;p&gt;asyncio 被用作多个提供高性能 Python 异步框架的基础，包括网络和网站服务，数据库连接库，分布式任务队列等等。&lt;/p&gt;
&lt;p&gt;asyncio 往往是构建 IO 密集型和高层级 &lt;strong&gt;结构化&lt;/strong&gt; 网络代码的最佳选择。&lt;/p&gt;
&lt;p&gt;使用场景:需要实时获取数据并对数据进行实时处理然后流出的情景.&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://didid.top/blog/categories/Python/"/>
    
    
      <category term="异步IO" scheme="http://didid.top/blog/tags/%E5%BC%82%E6%AD%A5IO/"/>
    
  </entry>
  
</feed>
